// SPDX-License-Identifier: MIT
pragma solidity ^0.8.0;

// Pasos 1 & 2
contract PrestamoDefi {
    address public socioPrincipal;

    struct Prestamo {
        uint256 id;
        address prestatario;
        uint256 monto;
        uint256 plazo;
        uint256 tiempoSolicitud;
        uint256 tiempoLimite;
        bool aprobado;
        bool reembolsado;
        bool liquidado;

    }

    
    struct Cliente {
        bool activado;
        uint256 saldoGarantia;
        mapping(uint256 => Prestamo) prestamos;
        uint256[] prestamoIds;
    }

    mapping(address => Cliente) public clientes;
    mapping(address => bool) public empleadosPrestamista;

// Paso 3 - Eventos 
    event SolicitudPrestamo(address indexed prestatario, uint256 monto, uint256 plazo);
    event PrestamoAprobado(address indexed prestatario, uint256 monto);
    event PrestamoReembolsado(address indexed prestatario, uint256 monto);
    event GarantiaLiquidada(address indexed prestatario, uint256 monto);

// Paso 4 -  Modificadores
    modifier soloSocioPrincipal () {
        require(msg.sender == socioPrincipal, "Error: No es el socio Principal");
        _;
    }

    
    modifier soloEmpleadoPrestamista () {
        require(empleadosPrestamista[msg.sender], "Error: No eres un empleado Prestamista");
        _;
    }

    modifier soloClienteRegistrado () {
       require(clientes[msg.sender].activado, "Error: No eres un cliente Registrado");
       _; 
    }

    
// Paso 5 - constructores
    constructor() {
        socioPrincipal = msg.sender;
        empleadosPrestamista[socioPrincipal] = true;
    }

// Paso 6 - Función: altaPrestamista
    function altaPrestamista (address nuevoPrestamista) public soloSocioPrincipal {
        require (!empleadosPrestamista[nuevoPrestamista], "Error: el prestamista ya esta dado de alta");
        empleadosPrestamista[nuevoPrestamista] = true;
    }

// Paso 7 - Función altaCliente
    function altaCliente (address nuevoCliente) public soloEmpleadoPrestamista {
        require (!clientes[nuevoCliente].activado, "Error: el cliente ya esta dado de alta");
        Cliente storage structNuevoCliente = clientes[nuevoCliente];
        structNuevoCliente.activado = true;
        structNuevoCliente.saldoGarantia = 0;
    }


// Paso 8 - Función depositarGarantia & actualizar el saldo del cliente
    function depositarGarantia() public payable soloClienteRegistrado {
        clientes[msg.sender].saldoGarantia += msg.value;
    }

    
// Paso 9 - Función solicitarPréstamos
    function solicitarPrestamo(
        uint256 monto_, uint256 plazo_
        ) public soloClienteRegistrado returns(uint256) {
            require(clientes[msg.sender].saldoGarantia >= monto_, "Error: Saldo de Garantia insufficiente");
        uint256 nuevoId = clientes[msg.sender].prestamoIds.length + 1;

        Prestamo storage nuevoPrestamo = clientes[msg.sender].prestamos[nuevoId];
        nuevoPrestamo.id = nuevoId;
        nuevoPrestamo.prestatario = msg.sender;
        nuevoPrestamo.monto = monto_;
        nuevoPrestamo.plazo = plazo_;
        nuevoPrestamo.tiempoSolicitud = block.timestamp; // la fecha actual
        nuevoPrestamo.tiempoLimite = 0; // cambiará al ser aprobado
        nuevoPrestamo.aprobado = false;
        nuevoPrestamo.reembolsado = false;
        nuevoPrestamo.liquidado = false;

        clientes[msg.sender].prestamoIds.push(nuevoId);

        emit SolicitudPrestamo(msg.sender, monto_, plazo_);

        return nuevoId;
    }


// Paso 10 - Función: aprobarPrestamo
    function aprobarPrestamo(address prestatario_, uint256 id_
    ) public soloEmpleadoPrestamista {

        Cliente storage prestatario = clientes[prestatario_];
        require(id_ > 0 && id_<= prestatario.prestamoIds.length, "Error: ID de prestamo no valido");

        Prestamo storage prestamo = prestatario.prestamos[id_];
        require(!prestamo.aprobado, "El prestamo ya esta aprobado");
        require(!prestamo.reembolsado, "El prestamo ha sido reembolsado");
        require(!prestamo.liquidado, "El prestamo ha sido liquidado");

        prestamo.aprobado = true;
        prestamo.tiempoLimite = block.timestamp + prestamo.plazo;
        emit PrestamoAprobado(prestatario_, prestamo.monto);

    }









